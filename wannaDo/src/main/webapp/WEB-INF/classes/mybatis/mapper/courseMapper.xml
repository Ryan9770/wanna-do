<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="course">
	
	<insert id="insertCourse" parameterType="com.bs.wd.course.Course">
		INSERT INTO course(num, courseLevel, categoryNum, courseName, content, price, reg_date, tag, recommended, userId, imageFile, hitCount)
		VALUES (course_seq.NEXTVAL, #{courseLevel}, #{categoryNum}, #{courseName}, #{content}, #{price}, SYSDATE, #{tag}, #{recommended}, #{userId}, #{imageFile}, 0)
	</insert>
	
	
	
	
	
	<select id="listCategory" parameterType="map" resultType="com.bs.wd.course.Course">
		SELECT categoryNum, category
		FROM courseCategory
	</select>
	
	<insert id="insertCategory" parameterType="map">
		INSERT INTO courseCategory(categoryNum, category) 
			VALUES (courseCategory_seq.NEXTVAL, #{category})
	</insert>
	
	<update id="updateCategory" parameterType="map">
		UPDATE courseCategory SET category=#{category}
		WHERE categoryNum = #{categoryNum}
	</update>
	
	<delete id="deleteCategory" parameterType="Integer">
		DELETE FROM courseCategory
		WHERE categoryNum = #{categoryNum}
	</delete>
	
	
	
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM course b
		JOIN member1 m ON b.userId=m.userId
		JOIN courseCategory c ON b.categoryNum = c.categoryNum
		<where>
			<if test="categoryNum!=0">
				( c.categoryNum = #{categoryNum} )
			</if>
			
			<if test="level != ''">
			AND ( courseLevel = #{level} )
			</if>

		</where>
	</select>
	
	<update id="updateHitCount" parameterType="Integer">
		UPDATE course SET hitCount=hitCount+1 WHERE num = #{num}
	</update>
	
	
	<select id="listCourse" parameterType="map" resultType="com.bs.wd.course.Course">
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM (
				SELECT b.num, b.userId, m.userName, courseName, imageFile, courseLevel,
					TO_CHAR(b.reg_date, 'YYYY-MM-DD') reg_date, creatorName, b.enabled,
					c.categoryNum, category
				FROM course b
				JOIN member1 m ON b.userId=m.userId
				JOIN courseCategory c ON b.categoryNum = c.categoryNum
				JOIN creatorInfo i ON b.userId=i.userId
			
				<where>
					
					<if test="categoryNum!=0">
						( c.categoryNum = #{categoryNum} )
					</if>

					<if test="level != ''">
					AND ( courseLevel = #{level} )
					</if>
				</where>
				ORDER BY num DESC
				
			) tb WHERE ROWNUM &lt;= #{end}
		) WHERE rnum &gt;= #{start}
	</select>
	
	<select id="readCourse" parameterType="Integer" resultType="com.bs.wd.course.Course">
		SELECT b.num, b.userId, courseName, content, price, creatorName, imageFilename,
			b.reg_date, tag, recommended, b.imageFile, courseLevel, intro,
			b.categoryNum, c.category,
			NVL(courseLikeCount, 0) courseLikeCount,
			NVL(avg, 0 ) rateAvg
 		FROM course b
		JOIN member1 m ON b.userId=m.userId
		JOIN courseCategory c ON b.categoryNum = c.categoryNum
		JOIN creatorInfo i ON b.userId=i.userId
		LEFT OUTER JOIN (
			SELECT num, COUNT(*) courseLikeCount FROM courseLike
			GROUP BY num
		) bc ON b.num = bc.num
		LEFT OUTER JOIN (
			SELECT num, TRUNC(AVG(rate), 0) avg
			FROM courseReview
			GROUP BY num
		) cr ON b.num = cr.num	
		
		WHERE b.num = #{num}
	</select>
	
	<update id="updateCourse" parameterType="com.bs.wd.course.Course">
		UPDATE course SET courseName=#{courseName}, categoryNum=#{categoryNum},
			imageFile=#{imageFile}, content=#{content}, price=#{price}, tag=#{tag}, recommended=#{recommended}
		WHERE num = #{num} AND userId = #{userId}
	</update>
	
	<delete id="deleteCourse" parameterType="map">
		DELETE FROM course WHERE num = #{num}
		<if test="membership &lt; 51 ">
			AND userId = #{userId}
		</if>
	</delete>
	
		<!-- 게시 글 좋아요 추가 -->
	<insert id="insertCourseLike" parameterType="map">
		INSERT INTO courseLike(num, userId) VALUES (#{num}, #{userId})
	</insert>

	<!-- 게시 글 좋아요 삭제 -->
	<delete id="deleteCourseLike" parameterType="map">
		DELETE FROM courseLike WHERE num = #{num} AND userId = #{userId}
	</delete>
      
	<!-- 게시글 좋아요 개수 -->
	<select id="courseLikeCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM courseLike WHERE num=#{num}
	</select>

	<!-- 게시글 좋아요 여부 -->
	<select id="userCourseLiked" parameterType="map" resultType="com.bs.wd.course.Course">
		SELECT num, userId FROM courseLike WHERE num = #{num} AND userId = #{userId}
	</select>
	
	
	
		<!-- 게시 글 좋아요 추가 -->
	<insert id="insertCourseBuy" parameterType="map">
		INSERT INTO courseBuy(num, userId) VALUES (#{num}, #{userId})
	</insert>

	<!-- 게시 글 좋아요 삭제 -->
	<delete id="deleteCourseBuy" parameterType="map">
		DELETE FROM courseBuy WHERE num = #{num} AND userId = #{userId}
	</delete>
      
	<!-- 게시글 좋아요 개수 -->
	<select id="courseBuyCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM courseBuy WHERE num=#{num}
	</select>

	<!-- 게시글 좋아요 여부 -->
	<select id="userCourseBought" parameterType="map" resultType="com.bs.wd.course.Course">
		SELECT num, userId FROM courseBuy WHERE num = #{num} AND userId = #{userId}
	</select>
	
	
	
	<insert id="insertChapter" parameterType="com.bs.wd.course.Chapter">
		INSERT INTO chapter(chapNum, num, orderNo, subject, video)
		VALUES (chapter_seq.NEXTVAL, #{num}, #{orderNo}, #{subject}, #{video})
	</insert>
	
	<!-- 댓글리스트 -->
	<select id="listChapter" parameterType="map" resultType="com.bs.wd.course.Chapter">
	
				SELECT chapNum, ch.num, subject, orderNo, c.userId
            FROM chapter ch
                JOIN course c ON ch.num=c.num
                JOIN member1 m1 ON c.userid=m1.userId
                WHERE ch.num=#{num} AND video=0
            ORDER BY orderNo

	</select>
	
	<delete id="deleteChapter" parameterType="map">
		DELETE FROM chapter
		WHERE chapNum=#{chapNum}
		OR video=#{chapNum}

	</delete>
	
	<insert id="insertVideo" parameterType="com.bs.wd.course.Chapter">
		INSERT INTO chapter(chapNum, num, orderNo, subject, video, videoLink)
		VALUES (chapter_seq.NEXTVAL, #{num}, #{orderNo}, #{subject}, #{video}, #{videoLink})
	</insert>
	
	<!-- 영상 리스트 -->
	<select id="listVideo" parameterType="Integer" resultType="com.bs.wd.course.Chapter">
		SELECT chapNum, ch.num, orderNo, subject, video, videoLink, c.userId
		FROM chapter ch
			 JOIN course c ON ch.num=c.num
             JOIN member1 m1 ON c.userid=m1.userId
		WHERE video = #{video}
		ORDER BY chapNum
	</select>
	
	
	
	<!-- 리뷰 -->
	<insert id="insertReview" parameterType="com.bs.wd.course.Review">
		INSERT INTO courseReview(reviewNum, num, userId, content, reg_date, rate)
			VALUES (courseReview_seq.NEXTVAL, #{num}, #{userId}, #{content}, SYSDATE, #{rate})
	</insert>

	<select id="listReview" parameterType="map" resultType="com.bs.wd.course.Review">
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM (
				SELECT r.reviewNum, r.userId, userName, num, content, r.reg_date, rate 
				FROM courseReview r
				JOIN member1 m ON r.userId = m.userId
				WHERE num=#{num}
				ORDER BY r.reviewNum DESC
			) tb WHERE ROWNUM &lt;= #{end}
		) WHERE rnum &gt;= #{start}
	</select>
	
	<select id="reviewCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) FROM courseReview
		WHERE num=#{num}
	</select>
	
	<delete id="deleteReview" parameterType="map">
		DELETE FROM courseReview
		WHERE reviewNum = #{reviewNum}
	</delete>
	
	<!-- 구매 -->
	<insert id="buyCourse" parameterType="com.bs.wd.course.Course">
		INSERT INTO useCookie(num, userId, amount, use_date, courseNum, courseName, state)
		VALUES(buyCourse_seq.NEXTVAL, #{userId}, #{price}, SYSDATE, #{courseNum}, #{courseName}, 0)
	</insert>
	<select id="creatorId" parameterType="Integer" resultType="String">
		SELECT userId FROM course WHERE num=#{num}
	</select>
	<insert id="creatorCredit" parameterType="com.bs.wd.course.Course">
		INSERT INTO mywallet(num, userId, amount, price, buy_date, state) VALUES(wallet_seq.NEXTVAL, #{userId}, #{price}, 0, SYSDATE, 2)
	</insert>
	
</mapper>