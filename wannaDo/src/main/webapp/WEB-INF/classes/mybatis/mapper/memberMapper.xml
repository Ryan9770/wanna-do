<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	<select id="loginMember" parameterType="String" resultType="com.bs.wd.member.Member">
		SELECT m.memberIdx, membership, userId, userName, userPwd, register_date, modify_date, last_login
		FROM member m
		JOIN member1 m1 ON m1.memberIdx = m.memberIdx
		WHERE userId = #{userId} AND enabled != 0
	</select>
	
	<update id="updateLastLogin" parameterType="String">
		UPDATE member1 SET last_login = SYSDATE, failure_cnt = 0
		WHERE userId=#{userId}
	</update>
	
	<select id="membershipNo" resultType="Integer">
		SELECT membership
		  FROM member m
		  JOIN member1 m1 ON m1.memberIdx = m.memberIdx
		 WHERE userId = #{userId}
	</select>
    
    <select id="memberSeq" resultType="Long">
       SELECT member_seq.NEXTVAL FROM dual 
    </select>

    <select id="creatorSeq" resultType="Long">
       SELECT creatorInfo_seq.NEXTVAL FROM dual 
    </select>
	
	<select id="memberIdx" resultType="Long" parameterType="String" >
		SELECT memberIdx
		FROM member1
		WHERE userId=#{userId}
	</select>
	
    <insert id="insertMember" parameterType="Long">
		INSERT INTO member(memberIdx, membership) VALUES (#{memberIdx}, 1) 
    </insert>

    <insert id="insertMember1" parameterType="com.bs.wd.member.Member">
		INSERT INTO member1(memberIdx, userId, userName, userPwd, enabled, register_date, modify_date, failure_cnt)
		VALUES (#{memberIdx}, #{userId}, #{userName}, #{userPwd}, 1, SYSDATE, SYSDATE, 0) 
    </insert>

    <insert id="insertMember2" parameterType="com.bs.wd.member.Member">
		INSERT INTO member2(userId, birth, email, tel)
		VALUES (#{userId}, #{birth}, #{email}, #{tel})
    </insert>
	
    <update id="insertMember12" parameterType="com.bs.wd.member.Member">
		INSERT ALL
		INTO member1(memberIdx, userId, userName, userPwd, enabled, 
			register_date, modify_date, failure_cnt)
		VALUES (#{memberIdx}, #{userId}, #{userName}, #{userPwd}, 1, SYSDATE, SYSDATE, 0)
		INTO member2(userId, birth, email, tel)
		VALUES (#{userId}, #{birth}, #{email}, #{tel})
		SELECT * FROM dual     
    </update>
	
	<insert id="insertCreator" parameterType="com.bs.wd.member.Member">
		INSERT INTO creatorInfo(creatorIdx, userId , intro, creatorName ,imageFilename ,creatorEmail ,creatorTel ,creator_reg_date )
		VALUES (#{creatorIdx},#{userId},#{intro},#{creatorName},#{imageFilename},#{creatorEmail},#{creatorTel},SYSDATE)
	</insert>

	<select id="readMember" parameterType="String" resultType="com.bs.wd.member.Member">
		SELECT m.memberIdx, membership, m1.userId, userName, userPwd, enabled,
			register_date, modify_date, last_login,
			TO_CHAR(birth, 'YYYY-MM-DD') birth, email, tel
		FROM member m 
		JOIN member1 m1 ON m.memberIdx = m1.memberIdx 
		LEFT OUTER JOIN member2 m2 ON m1.userId = m2.userId
		WHERE m1.userId = #{userId}
	</select>
	
	<select id="readCreatorMember" parameterType="String" resultType="com.bs.wd.member.Member">
		SELECT m.userId, userName, userPwd, enabled, TO_CHAR(birth, 'YYYY-MM-DD') birth, email, tel, 
			   intro, creatorName ,imageFilename ,creatorEmail ,creatorTel ,TO_CHAR(creator_reg_date, 'YYYY-MM-DD') creator_reg_date 
		  FROM member1 m
		  JOIN creatorInfo c ON c.userId = m.userId
LEFT OUTER JOIN member2 m2 ON m.userId = m2.userId
		 WHERE m.userId = #{userId}
	</select>
	
	<select id="readCreatorRegdate" parameterType="String" resultType="String">
		SELECT creator_reg_date
		  FROM member1 m
		  JOIN creatorInfo c ON c.userId = m.userId
LEFT OUTER JOIN member2 m2 ON m.userId = m2.userId
		 WHERE m.userId = #{userId}
	</select>
	
	<select id="readMemberByName" parameterType="String" resultType="com.bs.wd.member.Member">
		SELECT userName
		FROM member1 m 
		WHERE m.userName = #{userName}
	</select>
	
	<select id="readMemberByCreatorName" parameterType="String" resultType="com.bs.wd.member.Member">
		SELECT creatorName
		FROM creatorInfo c 
		WHERE c.creatorName = #{creatorName}
	</select>
	
	<select id="readMember2" parameterType="Long" resultType="com.bs.wd.member.Member">
		SELECT m.memberIdx, membership, enabled, 
			NVL(m1.userId, 'guest') userId, NVL(userName, '손님') userName, userPwd, 
			register_date, modify_date, last_login,
			TO_CHAR(birth, 'YYYY-MM-DD') birth, email, tel
		FROM member m
		LEFT OUTER JOIN member1 m1 ON m.memberIdx = m1.memberIdx
		LEFT OUTER JOIN member2 m2 ON m1.userId = m2.userId
		WHERE m.memberIdx = #{memberIdx}
	</select>
	
    <!-- 회원정보 수정  --> 
    <update id="updateMembership" parameterType="map">
		UPDATE member SET membership = #{membership}
		WHERE memberIdx=#{memberIdx}
    </update>

    <update id="updateMemberEnabled" parameterType="map">
		UPDATE member1 SET enabled=#{enabled} WHERE userId=#{userId}
    </update>
    
    <update id="updateMember1" parameterType="com.bs.wd.member.Member">
		UPDATE member1 SET userPwd=#{userPwd}, userName=#{userName}, modify_date=SYSDATE
		WHERE userId=#{userId}
    </update>
	
    <update id="updateMember2" parameterType="com.bs.wd.member.Member">
		UPDATE member2 SET email=#{email, jdbcType=VARCHAR}, 
			tel=#{tel, jdbcType=VARCHAR}, birth=#{birth, jdbcType=VARCHAR}
		WHERE userId=#{userId}
    </update>

    <update id="updateMember3" parameterType="com.bs.wd.member.Member">
		UPDATE member1 SET userPwd=#{userPwd}, modify_date=SYSDATE
		WHERE userId=#{userId}
    </update>
    
    <update id="updateCreatorInfo"  parameterType="com.bs.wd.member.Member">
    	UPDATE creatorInfo SET creatorName=#{creatorName}, creatorEmail=#{creatorEmail}, 
    	creatorTel=#{creatorTel}, intro=#{intro, jdbcType=VARCHAR}, imageFilename=#{imageFilename}
    	WHERE userId=#{userId}
    </update>

	<!-- dropout -->
	<update id="updateEnabled" parameterType="map">
		UPDATE member1 SET enabled = 0
	 	 WHERE userId = #{userId}	
	</update>
	<insert id="insertMemberState" parameterType="map">
		INSERT INTO memberState(stateNum, userId, stateCode, memo, registerId, reg_date)
		VALUES (memberState_seq.NEXTVAL, #{userId}, 10, '회원 탈퇴', #{userId}, SYSDATE)
	</insert>

    <!-- member 테이블 정보 삭제  -->    
    <delete id="deleteTrade" parameterType="String">
		DELETE FROM trade WHERE userId=#{userId}
    </delete>
    
    <delete id="deleteStudy" parameterType="String">
		DELETE FROM study WHERE userId=#{userId}
    </delete>
	
</mapper>